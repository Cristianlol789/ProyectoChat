package edu.progAvUD.segundoTaller2Corte.cliente.vista;

import javax.swing.JOptionPane;
import javax.swing.JPanel;

/**
 * Clase VentanaPrincipal
 * 
 * Esta clase extiende JFrame y representa la ventana principal de la aplicación cliente.
 * Contiene referencias a diálogos y paneles que forman parte de la interfaz gráfica,
 * tales como el panel principal de chat, el diálogo de ayuda y el diálogo para chat privado.
 * 
 * Además, ofrece métodos para mostrar mensajes al usuario y solicitar datos básicos
 * como el nombre del cliente y la IP del servidor.
 * 
 * Autor: Cristianlol789
 */
public class VentanaPrincipal extends javax.swing.JFrame {

    // Referencia al controlador gráfico (comentado en este código)
//    private ControlGrafico controlGrafico;

    /**
     * Diálogo que muestra la ayuda de la aplicación.
     */
    public DialogAyuda dialogAyuda;

    /**
     * Panel principal donde se muestra la conversación del chat y lista de usuarios.
     */
    public PanelChatCliente panelChatCliente;

    /**
     * Diálogo para manejar conversaciones privadas con otros usuarios.
     */
    public DialogChatPrivado dialogChatPrivado;
    
    /**
     * Constructor de la ventana principal.
     * Inicializa los componentes gráficos de la ventana.
     * 
     * @param controlGrafico Controlador gráfico (comentado en este código)
     */
    public VentanaPrincipal(/*ControlGrafico controlGrafico*/) {
        //this.controlGrafico = controlGrafico;
        initComponents();
    }
    
    /**
     * Inicializa los diálogos y paneles que se utilizan en la ventana.
     * 
     * @throws Exception En caso de error al crear alguno de los diálogos.
     */
    public void incializarVentana() throws Exception {
        this.panelChatCliente = new PanelChatCliente();
        this.dialogAyuda = new DialogAyuda();
        this.dialogChatPrivado = new DialogChatPrivado();
    }
    
    /**
     * Muestra un cuadro de diálogo informativo para notificar al usuario un mensaje de éxito.
     * 
     * @param mensaje Mensaje que se desea mostrar.
     */
    public void mostrarMensajeExito(String mensaje) {
        JOptionPane.showMessageDialog(this, mensaje, "Éxito", JOptionPane.INFORMATION_MESSAGE);
    }

    /**
     * Muestra un cuadro de diálogo para notificar al usuario un mensaje de error.
     * 
     * @param mensaje Mensaje de error que se desea mostrar.
     */
    public void mostrarMensajeError(String mensaje) {
        JOptionPane.showMessageDialog(this, mensaje, "Error", JOptionPane.ERROR_MESSAGE);
    }
    
    /**
     * Solicita al usuario que introduzca su nombre o nick mediante un cuadro de diálogo.
     * 
     * @return Cadena con el nombre del cliente introducido por el usuario.
     */
    public String darNombreCliente(){
        return JOptionPane.showInputDialog("Introducir Nick :");
    }
    
    /**
     * Solicita al usuario que introduzca la IP del servidor mediante un cuadro de diálogo.
     * El valor por defecto que aparece es "localhost".
     * 
     * @return Cadena con la IP del servidor introducida por el usuario.
     */
    public String darIpServidor(){
        return JOptionPane.showInputDialog("Introducir IP_SERVER :", "localhost");
    }

    /**
     * Cambia el panel visible dentro de la ventana principal.
     * Ajusta el tamaño de la ventana al contenido del panel, centra la ventana en pantalla,
     * y refresca la interfaz para reflejar el cambio.
     * 
     * @param panel Panel que se desea mostrar como contenido principal.
     */
    public void mostrarPanel(JPanel panel) {
        setContentPane(panel);
        pack(); // Ajusta el tamaño de la ventana según el contenido
        setLocationRelativeTo(null); // Centra la ventana en la pantalla
        revalidate(); // Refresca el layout
        repaint(); // Redibuja la ventana
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jCheckBoxMenuItem1 = new javax.swing.JCheckBoxMenuItem();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItemCreditos = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItemAyuda = new javax.swing.JMenuItem();

        jCheckBoxMenuItem1.setSelected(true);
        jCheckBoxMenuItem1.setText("jCheckBoxMenuItem1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jMenu1.setText("Acerca de");

        jMenuItemCreditos.setText("Creditos");
        jMenu1.add(jMenuItemCreditos);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Ayuda");

        jMenuItemAyuda.setText("Ayuda");
        jMenu2.add(jMenuItemAyuda);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 274, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents



    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    public javax.swing.JMenuItem jMenuItemAyuda;
    public javax.swing.JMenuItem jMenuItemCreditos;
    // End of variables declaration//GEN-END:variables
}
