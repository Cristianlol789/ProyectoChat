package edu.progAvUD.segundoTaller2Corte.servidor.vista;

import javax.swing.JOptionPane;
import javax.swing.JPanel;

/**
 * Clase que representa la ventana principal de la aplicación del servidor.
 * 
 * Esta ventana puede cambiar su contenido dinámicamente para mostrar distintos paneles,
 * como el panel de consola del servidor. También permite mostrar mensajes de éxito o error
 * al usuario mediante cuadros de diálogo.
 * 
 * Extiende {@code javax.swing.JFrame}.
 * 
 * @author Andres Felipe
 */
public class VentanaPrincipal extends javax.swing.JFrame {

    /** Panel de consola del servidor que muestra mensajes del sistema */
    public PanelConsolaServidor panelConsolaServidor;

    /**
     * Constructor que crea e inicializa la ventana principal.
     * También inicializa el panel de consola del servidor.
     */
    public VentanaPrincipal() {
        initComponents();
        this.panelConsolaServidor = new PanelConsolaServidor();
    }

    /**
     * Muestra un mensaje en el área de texto de la consola del servidor.
     * 
     * @param mensaje Texto que se desea añadir al log de la consola.
     */
    public void mostrarMensajeConsolaServidor(String mensaje) {
        panelConsolaServidor.jTextAreaConsola.append(mensaje + "\n");
    }

    /**
     * Muestra un cuadro de diálogo con un mensaje de éxito.
     *
     * @param mensaje Mensaje a mostrar al usuario.
     */
    public void mostrarMensajeExito(String mensaje) {
        JOptionPane.showMessageDialog(this, mensaje, "Éxito", JOptionPane.INFORMATION_MESSAGE);
    }

    /**
     * Muestra un cuadro de diálogo con un mensaje de error.
     *
     * @param mensaje Mensaje a mostrar al usuario.
     */
    public void mostrarMensajeError(String mensaje) {
        JOptionPane.showMessageDialog(this, mensaje, "Error", JOptionPane.ERROR_MESSAGE);
    }

    /**
     * Cambia el panel visible en la ventana principal.
     * Ajusta el tamaño, centra la ventana en pantalla y actualiza la interfaz gráfica.
     *
     * @param panel Panel que se desea mostrar en la ventana principal.
     */
    public void mostrarPanel(JPanel panel) {
        setContentPane(panel);
        pack(); // Ajusta el tamaño de la ventana según el contenido
        setLocationRelativeTo(null); // Centra la ventana en la pantalla
        revalidate(); // Refresca el layout
        repaint(); // Redibuja la ventana
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
